--  create the org database 
create database org; 
use org;

-- creating tables
create table Customers(
CustomerID int primary key, 
Name varchar(255),
Email varchar(255),
joindate Date);


CREATE TABLE Products (
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2)
);



CREATE TABLE Orders (
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate DATE,
TotalAmount DECIMAL(10, 2),
Foreign Key(CustomerID) REFERENCES Customers(CustomerID));

CREATE TABLE OrderDetails (
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID));



-- adding the values 
INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Sam John', 'samjohn11@gmail.com', '2020-01-15'),
(4, 'Smith Joy', 'smithjoy1154@gmail.com', '2020-04-06'),
(5, 'John Abrahim', 'johnabramin04@gmail.com' , '2020-04-06'),
(6, 'Alex Great' , 'alexgreat@gmail.com', '2020-05-25'),
(7, 'Saumya Singh', 'saumyasingh1108@gmail.com', '2020-05-02'),
(8, 'Sid Sarif', 'sidsarif@gmail.com', '2020-06-11'), 
(9, 'Tanu Singh', 'tanusingh@gmail.com' , '2020-07-05'),
(10, 'Alice Johnson', 'alicejohnson@example.com','2020-03-05');


INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 5499.99),
(2, 'Smartphone', 'Electronics', 3049.99),
(3, 'Laptop', 'Electronnics', 4500.00),
(4, 'Smartphone', 'Electronics', 2500.00),
(5, 'Television','Electronics', 8000.00),
(6, 'Night Lamp', 'Electronics', 1800.00),
(7, 'Sofa', 'Furniture', 7600.00),
(8, 'Laptop', 'Electronics', 6000.00),
(10, 'Desk Lamp', 'Home Decor', 709.99);



INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES
(1, 1, '2020-02-15', 54999.99),
(2, 2, '2020-02-17', 30499.99),
(3, 3, '2020-02-19', 45000.00),
(4, 4, '2020-04-14', 50000.80),
(5, 5, '2020-04-07', 25000.60),
(6, 6, '2020-05-31', 80000.80),
(7, 7, '2020-05-19', 1800.00),
(8, 8, '2020-05-24', 76000.50),
(9, 9, '2020-07-16', 60000.00),
(10, 10, '2020-07-21',70900.99);


INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity,
PricePerUnit) VALUES
(1, 1, 1, 1, 999.99),
(2, 2, 2, 10, 3049.99),
(3, 3, 3, 10, 4500.00),
(4, 4, 4, 20, 2500.00),
(5, 5, 5, 8, 8000.00),
(6, 6, 6, 10, 80000.00),
(7, 7, 7, 12, 1800.00),
(8, 8, 8, 10, 7600.00),
(9, 9, 9, 10, 6000.00),
(10, 10, 10, 2, 709.99);


-- basic queries 
-- List all customers 
select Name from customers; 

-- show products of electronics category 
select name from products 
where category = 'Electronics'; 

-- Find the total number of orders placed.
Select sum(Quantity) from orderdetails;

-- Display the details of most latest orders
Select * from Orders 
order by OrderDate Desc;


--  Joins and Relationships:
--  List all products along with the names of the customres. 
Select C.name as Customer_Name, P.name as Product_Name
from Products as P
Join Orders as O On P.ProductID = O.OrderID
Join Customers AS C ON O.CustomerID = C.CustomerID;

-- Show orders that include more than one product
Select O.OrderID, Q.quantity 
from Orders as O 
Join Orderdetails as Q   On O.OrderID = Q.OrderID;

-- Find the total sales amount for each customers 
Select O.TotalAmount, C.name
from Orders as O
Join Customers as C On O.CustomerID = C.CustomerID;

-- Aggregation and Grouping:
-- Calculate the total revenue generated by each product category
Select sum(price), category
from Products
group by category;


-- Determine the average value order 
Select Avg(totalamount) as avg_order_value
from orders; 

-- Find the month with the highest number of orders
Select EXTRACT(MONTH FROM orderdate) AS order_month,
    COUNT(*) AS order_count
FROM orders
GROUP BY order_month
ORDER BY order_count DESC
LIMIT 1;


-- Subqueries and Nested Queries:
-- Identify customers who have not placed any orders. 
Select C.name from customers as C
Left Join Orders as O On C.customerID = O.orderID 
where O.CustomerID IS NULL;

-- Find products that have never been ordered.
SELECT P.Name 
FROM Products AS P
RIGHT JOIN OrderDetails AS OD ON P.ProductID = OD.ProductID
WHERE P.ProductID IS NULL;


-- Show the top 3 best selling products 
SELECT P.ProductID, P.Name, SUM(OD.Quantity) AS TotalQuantitySold
FROM Products AS P
LEFT JOIN OrderDetails AS OD ON P.ProductID = OD.ProductID
GROUP BY P.ProductID, P.Name
ORDER BY TotalQuantitySold DESC
LIMIT 3;




-- Date time Functions:
-- List orders placed on the last month
SELECT *
FROM orders
WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 MONTH);

-- determine the oldest customers in terms of membership duration
SELECT CustomerID, Name, JoinDate, DATEDIFF(CURRENT_DATE, JoinDate) AS MembershipDuration
FROM customers
ORDER BY MembershipDuration DESC;

-- Advance Queries:
-- Rank customers based on their total spending
SELECT customers.CustomerID, customers.Name, SUM(orders.TotalAmount) AS TotalSpending,
    RANK() OVER (ORDER BY SUM(orders.TotalAmount) DESC) AS SpendingRank
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
GROUP BY customers.CustomerID, customers.Name
ORDER BY SpendingRank;

-- Identify the most popular product category
SELECT p.Category, p.Name, SUM(od.Quantity) AS TotalQuantitySold
FROM orderdetails as od
JOIN products p ON od.ProductID = p.ProductID
GROUP BY p.Category, p.Name
ORDER BY TotalQuantitySold DESC
LIMIT 1;

-- Calculate the month over month growth in sales 
WITH MonthlySales AS (
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(TotalAmount) AS TotalSales
    FROM orders
    GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')
)

SELECT Month, TotalSales,
    LAG(TotalSales) OVER (ORDER BY Month) AS PreviousMonthSales,
    (TotalSales - LAG(TotalSales) OVER (ORDER BY Month)) / LAG(TotalSales) OVER (ORDER BY Month) * 100 AS MoM_Growth
FROM MonthlySales;

-- Data Manipulation and Updates:
INSERT INTO Customers (CustomerID, Name, Email, JoinDate)
VALUES (11, 'Sim Smith', 'simsmith@example.com', '2020-07-07');

-- Update the price of a specific product. 
Update Products 
Set price = 1900.99 
where productId = 10;
